{"version":3,"sources":["Components/Quote.jsx","Components/Character.jsx","Components/Episode.jsx","App.js","reportWebVitals.js","index.js"],"names":["Quotes","quoteRandom","quote","author","series","className","Character","corredor","name","nickname","portrayed","status","divStyle","backgroundImage","img","style","Episode","title","season","episode","air_date","App","useState","addQuote","character","addCharacter","charFilt","addChar","addEpisode","epFilt","addEpi","callQuote","a","fetch","api","json","quoteData","callCharacter","api2","charData","callEpisode","api3","epData","console","log","filterCharacter","category","category2","charFilter","filter","corredor2","filterEpisode","epFilter","corredor3","removeContent","src","alt","onClick","Object","entries","length","Quote","map","char_id","episode_id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0c7e226a.chunk.js","sourcesContent":["import React, {Fragment} from 'react';\r\n\r\nconst Quotes = ({quoteRandom}) => {\r\n    const {quote, author, series} = quoteRandom\r\n\r\n    return ( \r\n        <Fragment>\r\n            <div className=\"quote\">\r\n                <h3>From: {series}</h3>\r\n                <p>\" {quote} \" <span>-{author}</span></p>\r\n            </div>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default Quotes;","import React, {Fragment} from 'react';\r\n\r\nconst Character = ({corredor}) => {\r\n    const {name, nickname, portrayed, status, img} = corredor;\r\n\r\n    const divStyle = {\r\n        backgroundImage: 'url('+img+')'\r\n    };\r\n\r\n    function Backy(){\r\n        return <div className=\"background\" style={divStyle}>\r\n         <div className=\"character\">\r\n            <h1>{portrayed}</h1>\r\n            <h2>as {name}</h2>\r\n            <h3>{nickname}</h3>\r\n            <p>{status}</p>\r\n        </div>\r\n        </div>\r\n    }\r\n    return (\r\n        <Fragment>\r\n        {Backy()}\r\n        </Fragment>\r\n        \r\n\r\n     );\r\n}\r\n \r\nexport default Character;","import React from 'react';\r\n\r\nconst Episode = ({corredor}) => {\r\n\r\nconst {title, season, episode, air_date} = corredor;\r\n\r\n    return ( \r\n    <div className=\"episode\">\r\n        <h2><span>season {season}</span>-{episode}- </h2>\r\n        <p>{title}<span> {air_date}</span></p>\r\n    </div>\r\n     );\r\n}\r\n \r\nexport default Episode;","import React, {Fragment, useState} from 'react';\nimport Quotes from './Components/Quote';\nimport Character from './Components/Character';\nimport Episode from './Components/Episode';\n\nimport './App.css'\n\nfunction App() {\n\n  const [quoteRandom, addQuote] = useState({})\n\n  const [character, addCharacter] = useState({})\n  const [charFilt, addChar] = useState({})\n\n  const[episode, addEpisode] = useState({})\n  const[epFilt, addEpi] = useState({})\n\n\n  const callQuote = async () =>{\n    const api =await fetch('https://breakingbadapi.com/api/quote/random');\n    const quoteData = await api.json();\n    addQuote(quoteData[0]);\n  }\n\n  const callCharacter = async () =>{\n    const api2 =await fetch('https://breakingbadapi.com/api/characters');\n    const charData = await api2.json();\n    addCharacter(charData);\n    addChar(charData);\n  }\n\n  const callEpisode = async () =>{\n    const api3 =await fetch('https://breakingbadapi.com/api/episodes');\n    const epData = await api3.json();\n    addEpisode(epData);\n    addEpi(epData);\n    console.log(episode)\n    console.log(epFilt)\n  }\n\n\n  const filterCharacter = (category, category2) => {\n     const charFilter = character.filter((corredor2 => corredor2.category === category || corredor2.category === category2))\n     addChar(charFilter)\n     \n  }\n\n  const filterEpisode = (series) => {\n    const epFilter = episode.filter((corredor3 => corredor3.series === series))\n    addEpi(epFilter)\n    \n }\n\n\n  const removeContent = () =>{\n    addQuote({});\n    addCharacter({});\n    addChar({});\n    addEpisode({});\n  }\n\n\n  return (\n    <Fragment>\n    <header>\n    <img src=\"./img/bb.webp\" alt=\"logo\"></img>\n    </header>\n    <div className=\"app-content\">\n    <div className=\"buttons\">\n\n    <button \n    onClick={() => {removeContent(); callQuote();}}\n    >Random quote</button>\n      {Object.entries(character).length !== 0\n        ?(<div className=\"filters\">\n        <button\n      onClick={() => {filterCharacter(\"Better Call Saul\", \"Breaking Bad, Better Call Saul\"); }}\n      >Better Call Saul</button>\n\n      <button\n      onClick={() => { filterCharacter(\"Breaking Bad\", \"Breaking Bad, Better Call Saul\");}}\n      >Breaking Bad</button>\n\n      <button\n      onClick={() => {removeContent(); callCharacter();}}\n      >All</button>\n        </div>\n\n      \n      )\n    \n      : <button\n      onClick={() => {removeContent(); callCharacter();}}\n      >Characters</button>\n      }\n\n      {Object.entries(episode).length !== 0\n        ?(<div className=\"filters\">\n\n        <button\n      onClick={() => {filterEpisode(\"Better Call Saul\"); }}\n      >Better Call Saul</button>\n\n      <button\n      onClick={() => { filterEpisode(\"Breaking Bad\");}}\n      >Breaking Bad</button>\n\n       <button\n      onClick={() => {removeContent(); callEpisode();}}\n      >All</button>\n        </div>\n\n        \n        )\n\n        : <button\n      onClick={() => {removeContent(); callEpisode();}}\n      >Episodes</button>\n      }\n\n\n    </div>\n    <div className=\"content\">\n\n    {Object.entries(quoteRandom).length === 0 && Object.entries(character).length === 0 && Object.entries(episode).length === 0\n    ? (<h1>Welcome to Breaking Bad API, choose an option above. vemian.</h1>)\n    : Object.entries(quoteRandom).length !== 0\n    ? (<Quotes\n      quoteRandom={quoteRandom}\n      />)\n    : Object.entries(charFilt).length !== 0\n    ?(\n      charFilt.map(corredor => (\n      <Character\n        key={corredor.char_id}\n        corredor={corredor}\n      />\n      \n      ))\n    )\n    : Object.entries(epFilt).length !== 0\n    ?(\n      epFilt.map(corredor => (\n      <Episode\n        key={corredor.episode_id}\n        corredor={corredor}\n      />\n      \n      ))\n    ):<h1>nel</h1>\n      } \n\n    </div>\n      \n    </div>\n    \n\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}